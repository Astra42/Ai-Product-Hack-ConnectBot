from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import aiohttp #–∞—Å—Å–∏–Ω—Ö –∞–Ω–∞–ª–æ–≥ requests
import keyboards as kb

import asyncio
from typing import Union, Optional

router = Router()

class Form(StatesGroup): #–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    name = State()
    about_me = State()
    cv_path = State()
    target = State()

class Editing(StatesGroup):#–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_name = State()
    edit_about_me = State()
    edit_cv_path = State()
    edit_target = State()

# \__DELETE_ALL
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞
user_messages = {} # dict[user: list[message_id]]
user_messages_lock = asyncio.Lock()


async def extract_data_from_message_or_callback(
    message_or_callback: Union[Message, CallbackQuery]
):
    if isinstance(message_or_callback, CallbackQuery): 
        user_id = message_or_callback.from_user.id
        bot = message_or_callback.bot
        message_id = message_or_callback.message.message_id
    elif isinstance(message_or_callback, Message):
        user_id = message_or_callback.from_user.id
        bot = message_or_callback.bot
        message_id = message_or_callback.message_id
    else:
        raise Exception(f"delete_all_messages: Wrong type of message_or_callback {message_or_callback=}")

    return bot, user_id, message_id


async def delete_all_messages(
        message_or_callback: Union[Message, CallbackQuery],
        primary_user_message: Optional[Union[Message, CallbackQuery]] = None
    ) -> None:    
    bot, user_id, _ = await extract_data_from_message_or_callback(message_or_callback)
    
    if primary_user_message is not None:
        _, user_id, _ = await extract_data_from_message_or_callback(primary_user_message)
    global user_messages_lock, user_messages

    print(f'delete_all_messages:{user_id=}')
    async with user_messages_lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ user_messages
        print(f'\delete_all_messages: {type(message_or_callback)=} | {user_messages[user_id]=}')

        if user_id in user_messages:
            for message_id in user_messages[user_id]:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=message_id)
                except:
                    pass
            user_messages[user_id] = []
        print(f'/delete_all_messages: {type(message_or_callback)=} | {user_messages[user_id]=} {user_id=}')

async def save_message_id(
        message_or_callback: Union[Message, CallbackQuery],
        primary_user_message: Optional[Union[Message, CallbackQuery]] = None
    ):
    _, user_id, message_id = await extract_data_from_message_or_callback(message_or_callback)
    if primary_user_message is not None:
        _, user_id, _ = await extract_data_from_message_or_callback(primary_user_message)
    
    global user_messages_lock, user_messages
    
    async with user_messages_lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ user_messages
        # print(f'\save_message_id: {type(message_or_callback)=} | {user_messages[user_id]=}')
        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append(message_id)
    
        print(f'/save_message_id: {type(message_or_callback)=} | {user_messages[user_id]=} {user_id=}')

# DELETE_ALL__/ 


# \__NETWORK_REQUEST

async def update_data(profile_id, data_dict={}):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"http://localhost:8001/profile/{profile_id}",
                               json=data_dict) as response:
            if response.status == 200:
                print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç—É—Å: {response.status}")


async def get_specific_profile(profile_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://localhost:8001/profile/{profile_id}") as response:
            if response.status == 200:
                return await response.text()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, —Å—Ç–∞—Ç—É—Å: {response.status}")
                return None


async def get_top_5(profile_id): #-> List[dict]
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://localhost:8001/profile/predict_for/{profile_id}") as response:
            if response.status == 200:
                return await response.text()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å: {response.status}")
                return None

# NETWORK_REQUEST__/


@router.message(Command('set_profile'))
@router.callback_query((F.data == 'set_profile'))
async def ask_confirmation(message: Message):
    await delete_all_messages(message, message)
    # await delete_all_messages(message.bot, message.from_user.id)    

    user_id = message.from_user.id
    user_dict = await get_specific_profile(user_id)
    if user_dict == '404':
        sent_message = await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞ üôà", reply_markup=kb.fill_pls_kb)
    else:
        user_dict = eval(eval(user_dict))
        print(f'{type(user_dict)=}\n{user_dict=}')

        profile_str =f"{user_dict['name']}, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n"+\
            f"üßê–û–±–æ –º–Ω–µ:\n{user_dict['about_me']}\n\n"+\
            f"üìùCV —Å—Å—ã–ª–∫–∞:\n{user_dict['cv_path']}\n\n"+\
            f"üîé–ò—â—É:\n{user_dict['target']}"
        try: # –ó–¥–µ—Å—å –ø–æ–¥ message —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–±–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            sent_message = await message.message.answer(profile_str, reply_markup=kb.profile_kb)
        except Exception: # –µ—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª–∏ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π message
            sent_message = await message.answer(profile_str, reply_markup=kb.profile_kb)

    await save_message_id(sent_message, message)



@router.message(CommandStart())
async def start(message: Message):
    hi_str = """–ü—Ä–∏–≤–µ—Ç! üëã
–≠—Ç–æ –±–æ—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä!ü§ñ
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏üßô‚Äç, —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ü§∏‚Äç
–∏ –æ–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–≥–æ —Å–æ–±—Å–µ–¥–Ω–∏–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ü§†
"""
    # print(f"start:{message=}")
    # await save_message_id(message)
    # await delete_all_messages(message)

    sent_message = await message.answer(hi_str, reply_markup=kb.hi_kb)
    save_message_id(sent_message, message)
    

#------------------------------------------- 1 - name ----------------
@router.callback_query((F.data == 'start_form')) # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ: –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
async def greeting(callback: CallbackQuery, state: FSMContext):
    await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)

    # -------------BD: create user ------------
    user_id = callback.message.from_user.id
    await update_data(user_id)
    # -----------------------------------------
    await state.set_state(Form.name)
    meet_msg = """–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"""
    sent_message = await callback.message.answer(meet_msg)
    print(f'greeting: {type(sent_message)=}')
    await save_message_id(sent_message, callback)
    


@router.callback_query(F.data == "edit_name") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # print(f'{callback=}')
    await delete_all_messages(callback, callback)  

    await state.set_state(Editing.edit_name)
    sent_message = await callback.message.answer(f"""–ù–æ–≤–æ–µ –∏–º—è: """)
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_name) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill name ------------
    user_id = message.from_user.id
    await update_data(user_id, {"name": message.text})
    # -----------------------------------------
    # await message.answer(f"""–ù–æ–≤–æ–µ –∏–º—è: {callback.message.text}""")

    sent_message = await message.answer('–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å–∞–Ω–æ!‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)

#------------------------------------------- 2 - about ----------------
@router.message(Form.name)
async def who_are_you(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill name ------------
    user_id = message.from_user.id
    await update_data(user_id, {"name": message.text})
    # -----------------------------------------

    await state.update_data(name=message.text)
    await state.set_state(Form.about_me)
    about_msg = """–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –º–æ–∂–µ—Ç —Ç—ã –ª—é–±–∏—à—å –ø–∏–≤–æ-—Å–º—É–∑–∏ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ—à—å –±–∞–Ω–∞–Ω–æ–≤–æ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–æ–π?"""
    sent_message = await message.answer(about_msg)
    await save_message_id(sent_message, message)


@router.callback_query(F.data == "edit_about_me") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–±–æ –º–Ω–µ - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)
    
    await state.set_state(Editing.edit_about_me)
    sent_message = await callback.message.answer("""–ò–∑–º–µ–Ω–∏—Ç—å –æ —Å–µ–±–µ:""")
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_about_me) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–±–æ –º–Ω–µ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await update_data(user_id, {"about_me": message.text})
    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å–∞–Ω–æ!‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)



#------------------------------------------- 3 - CV ----------------
@router.message(Form.about_me)
async def get_cv(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await update_data(user_id, {"about_me": message.text})
    # -----------------------------------------
    await state.update_data(about_me=message.text)
    await state.set_state(Form.cv_path)
    cv_msg = """–°—É–ø–µ—Ä!‚Ä®
–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á—à–µ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å, —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –Ω–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""
    
    sent_message = await message.answer(cv_msg)
    await save_message_id(sent_message, message)


@router.callback_query(F.data == "edit_cv_path") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CV - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # await save_message_id(callback)
    await delete_all_messages(callback, callback)

    await state.set_state(Editing.edit_cv_path)
    sent_message = await callback.message.answer("""–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ CV:""")
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_cv_path) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CV - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message):
    await save_message_id(message, message)
    # await delete_all_messages(message, message)


    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await update_data(user_id, {"cv_path": message.text})
    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å–∞–Ω–æ!‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)


#------------------------------------------- 4 Target ----------------
@router.message(Form.cv_path)
async def get_target(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill cv ------------
    user_id = message.from_user.id
    await update_data(user_id, {"cv_path": message.text})
    # -----------------------------------------
    await state.update_data(cv_path=message.text)
    await state.set_state(Form.target)
    target_msg = """–û–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏"""
    sent_message = await message.answer(target_msg)
    await save_message_id(sent_message, message)


@router.callback_query(F.data == "edit_target")  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)

    await state.set_state(Editing.edit_target)
    sent_message = await callback.message.answer("""–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:""")
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_target)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message):
    await save_message_id(message, message)
    

    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await update_data(user_id, {"target": message.text})
    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å–∞–Ω–æ!‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)


@router.message(Form.target)
async def set_target(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill target ------------
    if message.text != "/set_profile":
        user_id = message.from_user.id
        await update_data(user_id, {"target": message.text})
    # -----------------------------------------
    await state.update_data(target=message.text)
    await ask_confirmation(message)


# –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º—Å—è
@router.message(Command('search_interlocutor'))
@router.callback_query(F.data == 'search_interlocutor')
async def catalog(message: Message):
    await save_message_id(message)
    await delete_all_messages(message)

    user_id = message.from_user.id
    users_list = await get_top_5(user_id)
    if users_list == '404':
        try:
            await message.message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞ üôà", reply_markup=kb.fill_pls_kb)
        except Exception:
            await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞ üôà", reply_markup=kb.fill_pls_kb)
    else:
        print(users_list, type(users_list))
        users_list = eval(users_list)
        print(users_list, type(users_list))

        profiles_str = ''
        for user_dict in users_list:
            profiles_str += "-" * 10 + '\n' + \
                f"{user_dict['name']}\n\n" + \
                f"üßêAbout:\n{user_dict['about_me']}\n\n"+\
                f"üìùCV —Å—Å—ã–ª–∫–∞:\n{user_dict['cv_path']}\n\n"

        try:#–ó–¥–µ—Å—å –ø–æ–¥ message —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–±–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            await message.message.answer(profiles_str, reply_markup=kb.back_to_profile)
        except Exception:#–µ—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª–∏ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π message
            await message.answer(profiles_str, reply_markup=kb.back_to_profile)

# @router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=kb.main)
#     await message.reply('–ö–∞–∫ –¥–µ–ª–∞')


# @router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=kb.main)
#     await message.reply('–ö–∞–∫ –¥–µ–ª–∞')

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")

@router.message(F.text == '–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ')
async def nice(message: Message):
    await message.answer("–Ø –æ—á–µ–Ω—å —Ä–∞–¥")

@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.catalog)

@router.callback_query(F.data == 't_shirt')
async def catalog(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")

# @router.message(Command('register'))
# async def register(message: Message, state: FSMContext):
#     await state.set_state(Register.name)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
#
# @router.message(Register.name)
# async def register_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await state.set_state(Register.age)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
#
# @router.message(Register.age)
# async def register_age(message: Message, state: FSMContext):
#     await state.update_data(age=message.text)
#     await state.set_state(Register.number)
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.get_number)
#
# @router.message(Register.number, F.contact)
# async def register_number(message: Message, state: FSMContext):
#     await state.update_data(number=message.contact)
#     data =await state.get_data()
#     await message.answer(f"–í–∞—à–µ –∏–º—è : {data['name']} \n –Ω–æ–º–µ—Ä {data['number']}\n –ª–µ—Ç {data['age']}")
#
#
