from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import aiohttp#–∞—Å—Å–∏–Ω—Ö –∞–Ω–∞–ª–æ–≥ requests
import bot.keyboards as kb


router = Router()
USERS = {}  # id:User

class Form(StatesGroup):
    name = State()
    about_me = State()
    cv_path = State()
    target = State()

async def update_data(profile_id, data_dict={}):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"http://localhost:8001/profile/{profile_id}",
                               json=data_dict) as response:
            if response.status == 200:
                print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç—É—Å: {response.status}")

async def get_specific_profile(profile_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://localhost:8001/profile/{profile_id}") as response:
            if response.status == 200:
                return await response.text()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è, —Å—Ç–∞—Ç—É—Å: {response.status}")
                return None


@router.message(CommandStart())
async def start(message: Message):
    hi_str = """–ü—Ä–∏–≤–µ—Ç! üëã
–≠—Ç–æ –±–æ—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä!ü§ñ
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏üßô‚Äç, —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ü§∏‚Äç
–∏ –æ–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–≥–æ —Å–æ–±—Å–µ–¥–Ω–∏–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ü§†
"""
    await message.answer(hi_str, reply_markup=kb.hi_kb)


@router.callback_query(F.data == 'start_form')
async def greeting(callback: CallbackQuery, state: FSMContext):
    # -------------BD: create user ------------
    user_id = callback.message.from_user.id
    await update_data(user_id)
    # -----------------------------------------
    await state.set_state(Form.name)
    print(f"Added new user {USERS}")
    meet_msg = """–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"""
    await callback.message.answer(meet_msg)


@router.message(Form.name)
async def who_are_you(message: Message, state: FSMContext):
    # -------------BD: fill name ------------
    user_id = message.from_user.id
    await update_data(user_id, {"name": message.text})
    # -----------------------------------------
    await state.update_data(name=message.text)
    await state.set_state(Form.about_me)
    about_msg = """–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –º–æ–∂–µ—Ç —Ç—ã –ª—é–±–∏—à—å –ø–∏–≤–æ-—Å–º—É–∑–∏ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ—à—å –±–∞–Ω–∞–Ω–æ–≤–æ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–æ–π?"""
    await message.answer(about_msg)


@router.message(Form.about_me)
async def get_cv(message: Message, state: FSMContext):
    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await update_data(user_id, {"about_me": message.text})
    # -----------------------------------------
    await state.update_data(about_me=message.text)
    await state.set_state(Form.cv_path)
    cv_msg = """–°—É–ø–µ—Ä!‚Ä®
–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á—à–µ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å, —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –Ω–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""
    await message.answer(cv_msg)


@router.message(Form.cv_path)
async def get_target(message: Message, state: FSMContext):
    # -------------BD: fill cv ------------
    user_id = message.from_user.id
    await update_data(user_id, {"cv_path": message.text})
    # -----------------------------------------
    await state.update_data(cv_path=message.text)
    await state.set_state(Form.target)
    target_msg = """–û–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏"""
    await message.answer(target_msg)


@router.message(Command("set_profile"))
@router.message(Form.target)
async def ask_confirmation(message: Message, state: FSMContext):
    # -------------BD: fill target ------------
    user_id = message.from_user.id
    await update_data(user_id, {"target": message.text})
    # -----------------------------------------
    user_dict = await get_specific_profile(user_id)
    print(user_dict)
    print(user_dict, type(user_dict))

    user_dict = eval(eval(user_dict))
    print(user_dict, type(user_dict))

    profile_str =f"{user_dict['name']}\n"+\
        f"üßê–û–±–æ –º–Ω–µ:\n{user_dict['about_me']}\n"+\
        f"üìùCV —Å—Å—ã–ª–∫–∞:\n{user_dict['cv_path']}\n"+\
        f"üîé–ò—â—É:\n{user_dict['target']}"

    await message.answer(profile_str)

    # await state.update_data(target=message.text)
    # await state.set_state(Form.target)
    # target_msg = """–û–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏"""
    # await message.answer(target_msg)


@router.callback_query(F.data == 't_shirt')
async def catalog(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")





# @router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=kb.main)
#     await message.reply('–ö–∞–∫ –¥–µ–ª–∞')


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=kb.main)
    await message.reply('–ö–∞–∫ –¥–µ–ª–∞')

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")

@router.message(F.text == '–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ')
async def nice(message: Message):
    await message.answer("–Ø –æ—á–µ–Ω—å —Ä–∞–¥")

@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.catalog)

@router.callback_query(F.data == 't_shirt')
async def catalog(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É—Ç–±–æ–ª–æ–∫")

# @router.message(Command('register'))
# async def register(message: Message, state: FSMContext):
#     await state.set_state(Register.name)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
#
# @router.message(Register.name)
# async def register_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await state.set_state(Register.age)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
#
# @router.message(Register.age)
# async def register_age(message: Message, state: FSMContext):
#     await state.update_data(age=message.text)
#     await state.set_state(Register.number)
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.get_number)
#
# @router.message(Register.number, F.contact)
# async def register_number(message: Message, state: FSMContext):
#     await state.update_data(number=message.contact)
#     data =await state.get_data()
#     await message.answer(f"–í–∞—à–µ –∏–º—è : {data['name']} \n –Ω–æ–º–µ—Ä {data['number']}\n –ª–µ—Ç {data['age']}")
#
#
