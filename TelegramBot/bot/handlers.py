import io
import os
import sys

# /Ai-Product-Hack-ConnectBot/TelegramBot/bot/handlers.py -> /Ai-Product-Hack-ConnectBot/
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from TelegramBot.bot.network import Network 

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from data_science.hh_parser import hh_parser
from data_science.github_parser import github_parser


from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.types import UserProfilePhotos

from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


import aiohttp # –∞—Å—Å–∏–Ω—Ö –∞–Ω–∞–ª–æ–≥ requests
import keyboards as kb

import asyncio
from typing import Union, Optional, List, Tuple
from pprint import pprint


router = Router()

class Form(StatesGroup): #–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    name = State()
    about_me = State()
    cv_path = State()
    target = State()
    github = State()

class Editing(StatesGroup):#–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_name = State()
    edit_about_me = State()
    edit_cv_path = State()
    edit_target = State()
    edit_github = State()


# \__DELETE_ALL
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞
user_messages = {} # dict[user: list[message_id]]
user_messages_lock = asyncio.Lock()


async def extract_data_from_message_or_callback(
    message_or_callback: Union[Message, CallbackQuery]
):
    if isinstance(message_or_callback, CallbackQuery): 
        user_id = message_or_callback.from_user.id
        bot = message_or_callback.bot
        message_id = message_or_callback.message.message_id
    elif isinstance(message_or_callback, Message):
        user_id = message_or_callback.from_user.id
        bot = message_or_callback.bot
        message_id = message_or_callback.message_id
    else:
        raise Exception(f"delete_all_messages: Wrong type of message_or_callback {message_or_callback=}")

    return bot, user_id, message_id


async def delete_all_messages(
        message_or_callback: Union[Message, CallbackQuery],
        primary_user_message: Optional[Union[Message, CallbackQuery]] = None
    ) -> None:    
    bot, user_id, _ = await extract_data_from_message_or_callback(message_or_callback)
    
    if primary_user_message is not None:
        _, user_id, _ = await extract_data_from_message_or_callback(primary_user_message)
    global user_messages_lock, user_messages

    print(f'delete_all_messages:{user_id=}')
    async with user_messages_lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ user_messages
        try:
            print(f'\delete_all_messages: {type(message_or_callback)=} | {user_messages[user_id]=}')
        except Exception as e:
            print(f"bot:delete_all_messages:{user_id=}\n{e=}")
        if user_id in user_messages:
            for message_id in user_messages[user_id]:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=message_id)
                except:
                    pass
            user_messages[user_id] = []

        try:
            print(f'\delete_all_messages: {type(message_or_callback)=} | {user_messages[user_id]=}')
        except Exception as e:
            print(f"bot:delete_all_messages:{user_id=}\n{e=}")

async def save_message_id(
        message_or_callback: Union[Message, CallbackQuery],
        primary_user_message: Optional[Union[Message, CallbackQuery]] = None
    ):
    _, user_id, message_id = await extract_data_from_message_or_callback(message_or_callback)
    if primary_user_message is not None:
        _, user_id, _ = await extract_data_from_message_or_callback(primary_user_message)
    
    global user_messages_lock, user_messages
    
    async with user_messages_lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ user_messages
        # print(f'\save_message_id: {type(message_or_callback)=} | {user_messages[user_id]=}')
        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append(message_id)
    
        print(f'/save_message_id: {type(message_or_callback)=} | {user_messages[user_id]=} {user_id=}')

# DELETE_ALL__/ 


# \__RECOMMENDS
# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–π –∞–Ω–∫–µ—Ç—ã
user_pointers = {} # dict[user: number_of_recomendred_profile]
user_pointers_lock = asyncio.Lock()
# __RECOMMENDS/

async def apply_n_gramms(about_me : str, n_gramms: List[List]):
    last_pairs = ''
    for start, end in n_gramms:
        if f"{start}-{end}" not in last_pairs:
            about_me = about_me[:start] + "<u>" + about_me[start:end]+ "</u>" + about_me[end:]
            last_pairs += f", {start}-{end}"
    return about_me


async def get_picture(id):
    img_path = os.path.join('media', f"{id}.jpg")
    if os.path.exists(img_path):
        return FSInputFile(img_path)
    # else:
        # return "\n\nüì∑ –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É, –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç\n"


@router.message(Command('search_interlocutor_from_menu'))
@router.message(F.text.regexp(r'^\/\d+$'))# –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–∏–ø—É /1 /6 (–ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
# @router.callback_query(F.data.startswith('rec_'))# –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–ª–±–µ–∫–∏ –ø–æ —Ç–∏–ø—É rec_1 rec_6 (–ö–Ω–æ–ø–∫–∞ –¥–∞–ª–µ–µ)
@router.callback_query(F.data == 'search_interlocutor')
@router.message(F.text == 'üöÄ –î–∞–ª–µ–µ')
@router.message(Command('üöÄ –î–∞–ª–µ–µ'))
async def catalog(message: Message, state: FSMContext):
    await state.set_state(None)  # –°—Ä–∞–∑—É –∑–∞–Ω—É–ª—è–µ–º –≤—Å–µ —Å—Ç–µ–π—Ç—ã
    print('–í–û–®–ï–õ –í –ö–ê–¢–û–õ–û–ì')
    # await save_message_id(message)
    # await delete_all_messages(message)
    user_id = message.from_user.id
    #–ï—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏–ª–∏ —Ä–µ—à–∏–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    print(f'bot:catalog:{user_pointers=}', )
    print(message)
    text = message.text if isinstance(message, Message) else message.data
    if (user_id not in user_pointers.keys() or text.startswith(('search_', '/search_'))) and text != 'üöÄ –î–∞–ª–µ–µ':
        print('–ù–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª')

        recommendation = await Network.get_recommendation(user_id)
        print(f'bot:catalog:{recommendation=}')
        
        text_get_inplementation = await Network.get_inplementation(user_id)
        print(f'{text_get_inplementation=}')
        
        try:
            n_gramms = eval(text_get_inplementation)
        except Exception as e:
            print(f'bot:catalog {e=}')
            n_gramms = []

        print('n_gramms', n_gramms)

        if recommendation == '404':
            await answer_by_msg_or_clb(message, "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞ üôà", reply_markup=kb.fill_pls_kb)
        async with user_pointers_lock:
            user_pointers[user_id] = 1 # –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç–µ

        print(recommendation)

        recomended_profile_dict = eval(recommendation)
        photo = await get_picture(recomended_profile_dict['id'])
        content = await get_profile_str(1, recomended_profile_dict, n_gramms=n_gramms)

        await answer_by_msg_or_clb(message, content, reply_markup=kb.get_watch_next_kb_buttons(), photo=photo) # kb.get_watch_next_kb(1)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –∞–Ω–∫–µ—Ç–∞–º
    else:
        rec_cnt_row = await Network.get_recommendation_cnt(user_id) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        rec_cnt = int(eval(rec_cnt_row.replace("len=", "")))
        print(rec_cnt)
        print('–ë—ã–ª')
        if text != 'üöÄ –î–∞–ª–µ–µ':
            text = message.text if isinstance(message, Message) else message.data
            serial_rec_num = int(text.replace('rec_', '').replace('/', ''))#–∫–µ–π—Å –µ—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑
        else:
            serial_rec_num = user_pointers[user_id] + 1

        if serial_rec_num > rec_cnt or serial_rec_num < 1:  # recommendation == '404':
            await answer_by_msg_or_clb(message, "–ù–∞ —ç—Ç–æ–º –≤—Å—ë! üôà ", reply_markup=kb.back_to_profile)
            async with user_pointers_lock:
                user_pointers[user_id] = rec_cnt
        else:
            async with user_pointers_lock:
                user_pointers[user_id] = serial_rec_num

            recommendation = await Network.get_recommendation(user_id, rec_num=user_pointers[user_id] - 1, refresh=False)
            
            try:
                n_gramms = eval(await Network.get_inplementation(user_id, inplement_num=user_pointers[user_id] - 1, refresh=False))
            except Exception as e:
                print(f'bot:catalog {e=}')
                n_gramms = []
            
            print('n_gramms', n_gramms)

            recomended_profile_dict = eval(recommendation)
            photo = await get_picture(recomended_profile_dict['id'])
            content = await get_profile_str(user_pointers[user_id], eval(recommendation), n_gramms=n_gramms)
            await answer_by_msg_or_clb(
                message, content,
                reply_markup=kb.get_watch_next_kb_buttons(),
                photo=photo
                # kb.get_watch_next_kb(num=user_pointers[user_id])
            )


# @router.message(F.text == "üç∫ / üç∑")
@router.message(Command('set_profile'))
@router.callback_query((F.data == 'set_profile'))
async def ask_confirmation(message: Message, state: FSMContext):
    await state.set_state(None) # –°—Ä–∞–∑—É –∑–∞–Ω—É–ª—è–µ–º –≤—Å–µ —Å—Ç–µ–π—Ç—ã
    await delete_all_messages(message, message)
    # await delete_all_messages(message.bot, message.from_user.id)    

    
    user_id = message.from_user.id
    user_dict = await Network.get_specific_profile(user_id)
    if user_dict == '404':
        sent_message = await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞ üôà", reply_markup=kb.fill_pls_kb)
    else:
        
        # print(user_dict, type(user_dict))
        # print(eval(user_dict), type(eval(user_dict)))

        user_dict = eval(eval(user_dict))
        # print(f'bot:ask_confirmation0:', user_dict, type(user_dict))
        # pprint(f'bot:ask_confirmation{user_dict[user_id]=}')
        # print(f'{type(user_dict)=}\n{user_dict=}')

        def pretty_cv(user_dict: dict) -> str:
            result_cv_str = ""
            if user_dict['hh_cv'] and isinstance(user_dict['hh_cv'], dict):
                if user_dict['hh_cv']['position']:
                    result_cv_str += f"üìù CV | üë§ {user_dict['hh_cv']['position']}\n"
                    # result_cv_str += f"üë§ –ü–æ–∑–∏—Ü–∏—è: {user_dict['hh_cv']['position']}\n"

                    about_me_hh_str = f"{user_dict['hh_cv']['about'][:300]}"
                    if len(user_dict['hh_cv']['about']) > 300:
                        about_me_hh_str += "..."
                
                # result_cv_str += f"–û —Å–µ–±–µ: {about_me_hh_str}"
                result_cv_str += f"{about_me_hh_str}"

            if user_dict['github_cv']:
                if result_cv_str != "" or result_cv_str != "\n":
                     result_cv_str += "\n\n"

                if 'github_username' in user_dict['github_cv'] and user_dict['github_cv']['github_username'] != "" \
                    and user_dict['github_cv']['github_username'] is not None:
                    result_cv_str += f"üíª github | üë§ {user_dict['github_cv']['github_username']}\n"
                    # result_cv_str += f"üë§ {user_dict['github_cv']['github_username']}\n"

                    if user_dict['github_cv']['github_bio'] is not None \
                        and user_dict['github_cv']['github_bio'] != "":

                        about_me_github_str = f"{user_dict['github_cv']['github_bio'][:300]}"

                        if len(user_dict['github_cv']['github_bio']) > 300:
                            about_me_github_str += "..."
                        # result_cv_str += f"–û —Å–µ–±–µ: {about_me_github_str}"
                        result_cv_str += f"{about_me_github_str}"

            # if user_dict['cv_path']:
            #     result_cv_str += f"üìù CV\n"
            #     result_cv_str += f"{user_dict['cv_path']}"

            return result_cv_str


        profile_str =f"{user_dict['name']}, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n" + \
            f"üßê –û–±–æ –º–Ω–µ:\n{user_dict['about_me']}\n\n" + \
            f"{pretty_cv(user_dict)}\n\n" + \
            f"üîé –ò—â—É:\n{user_dict['target']}\n\n" + \
            f"üì∑ –ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å/–∏–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É, –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç\n"

        picture_out = await get_picture(user_id)



        try: # –ó–¥–µ—Å—å –ø–æ–¥ message —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–±–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            if isinstance(picture_out, str):#–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –∞–≤—ã –Ω–µ—Ç –∏ –Ω–∞–º –Ω–∞–¥–æ –∏–∑–≤–µ—Å—Ç–∏—Ç—å
                sent_message = await message.message.answer(profile_str + picture_out, reply_markup=kb.profile_kb)
            else:#–í—Ç–æ—Ä–æ–π - –∞–≤–∞ –µ—Å—Ç—å, –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø–∏–∫—á—É
                sent_message = await message.message.bot.send_photo(message.message.chat.id, photo=picture_out, caption=profile_str, reply_markup=kb.profile_kb)

        except Exception: # –µ—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª–∏ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π message
            if isinstance(picture_out, str):#–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –∞–≤—ã –Ω–µ—Ç –∏ –Ω–∞–º –Ω–∞–¥–æ –∏–∑–≤–µ—Å—Ç–∏—Ç—å
                sent_message = await message.answer(profile_str + picture_out, reply_markup=kb.profile_kb)
            else:#–í—Ç–æ—Ä–æ–π - –∞–≤–∞ –µ—Å—Ç—å, –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø–∏–∫—á—É
                print(picture_out)
                sent_message = await message.bot.send_photo(message.chat.id, photo=picture_out, caption=profile_str, reply_markup=kb.profile_kb)

    await save_message_id(sent_message, message)



async def save_telegram_personal_avatar(message: Message):
    if os.path.exists(os.path.join('media', str(message.from_user.id) + '.jpg')):
        return
    user_profile_photo: UserProfilePhotos = await message.bot.get_user_profile_photos(message.from_user.id)
    if len(user_profile_photo.photos[0]) > 0:
        file = await message.bot.get_file(user_profile_photo.photos[0][0].file_id)
        await _download_photo(message, file, show_keyboard=False)
    else:
        print('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.') 

@router.message(CommandStart())
async def start(message: Message):
    hi_str = """–ü—Ä–∏–≤–µ—Ç! üëã
–≠—Ç–æ –±–æ—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä! ü§ñ
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ üßô‚Äç, —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ ü§∏‚Äç
–æ–ø–∏—Å–∞—Ç—å –∫–∞–∫–æ–≥–æ —Å–æ–±—Å–µ–¥–Ω–∏–∫–∞ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ü§†
"""
    await save_telegram_personal_avatar(message)

    print(f"bot:start:{message.bot.id=}")
    sent_message = await message.answer(hi_str, reply_markup=kb.hi_kb)
    await save_message_id(sent_message, message)



    

#------------------------------------------- 1 - name ----------------
@router.callback_query((F.data == 'start_form')) # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ: –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
async def greeting(callback: CallbackQuery, state: FSMContext):
    await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)

    # -------------BD: create user ------------
    user_id = callback.message.from_user.id
    await Network.update_data(user_id)
    # -----------------------------------------
    await state.set_state(Form.name)
    meet_msg = """–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"""
    sent_message = await callback.message.answer(meet_msg)
    print(f'greeting: {type(sent_message)=}')
    await save_message_id(sent_message, callback)
    


@router.callback_query(F.data == "edit_name") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # print(f'{callback=}')
    await delete_all_messages(callback, callback)

    await state.set_state(Editing.edit_name)
    sent_message = await callback.message.answer(f"""–ù–æ–≤–æ–µ –∏–º—è: """)
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_name) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)
    await state.set_state(None)

    # -------------BD: fill name ------------
    user_id = message.from_user.id
    await Network.update_data(user_id, {"name": message.text})
    # -----------------------------------------
    # await message.answer(f"""–ù–æ–≤–æ–µ –∏–º—è: {callback.message.text}""")

    sent_message = await message.answer('–°—É–ø–µ—Ä! üî• –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)



##########


@router.callback_query(F.data == "edit_github") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å github - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # print(f'{callback=}')
    await delete_all_messages(callback, callback)

    await state.set_state(Editing.edit_github)
    sent_message = await callback.message.answer(f"""–£–∫–∞–∂–∏—Ç–µ  github: """)
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_github) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)
    await state.set_state(None)

    # -------------BD: fill name ------------
    user_id = message.from_user.id
    # await Network.update_data(user_id, {"name": message.text})
    await parse_and_update_cv(cv_link=message.text, user_id=user_id)
    
    # -----------------------------------------
    # await message.answer(f"""–ù–æ–≤–æ–µ –∏–º—è: {callback.message.text}""")

    sent_message = await message.answer('–°—É–ø–µ—Ä! üî• –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)

##########

#------------------------------------------- 2 - about ----------------
@router.message(Form.name)
async def who_are_you(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill name ------------
    user_id = message.from_user.id
    await Network.update_data(user_id, {"name": message.text})
    # -----------------------------------------

    await state.update_data(name=message.text)
    await state.set_state(Form.about_me)
    about_msg = """–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –º–æ–∂–µ—Ç —Ç—ã –ª—é–±–∏—à—å –ø–∏–≤–æ-—Å–º—É–∑–∏ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ—à—å –±–∞–Ω–∞–Ω–æ–≤–æ–π —Ä–µ—Å–ø—É–±–ª–∏–∫–æ–π? üèÑ‚Äç‚ôÇÔ∏è
–¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ø—Ä–æ—Ñ—Ñ–µ—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏! ü§ì üíµ üíº
    """
    sent_message = await message.answer(about_msg)
    await save_message_id(sent_message, message)


@router.callback_query(F.data == "edit_about_me") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–±–æ –º–Ω–µ - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)
    
    await state.set_state(Editing.edit_about_me)
    sent_message = await callback.message.answer("""–ò–∑–º–µ–Ω–∏—Ç—å –æ —Å–µ–±–µ:""")
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_about_me) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –û–±–æ –º–Ω–µ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)
    await state.set_state(None)
    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await Network.update_data(user_id, {"about_me": message.text})
    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! üî• –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)



#------------------------------------------- 3 - CV ----------------
@router.message(Form.about_me)
async def get_cv(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await Network.update_data(user_id, {"about_me": message.text})
    # -----------------------------------------
    await state.update_data(about_me=message.text)
    await state.set_state(Form.cv_path)
    cv_msg = """–°—É–ø–µ—Ä!‚Ä® üî•
–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á—à–µ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å, —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å –Ω–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
* —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ hh.ru 
* —Å—Å—ã–ª–∫—É –Ω–∞ github.com
"""
    sent_message = await message.answer(cv_msg)
    await save_message_id(sent_message, message)


@router.callback_query(F.data == "edit_cv_path") # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CV - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    # await save_message_id(callback)
    await delete_all_messages(callback, callback)
    await state.set_state(Editing.edit_cv_path)
    sent_message = await callback.message.answer("""–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ CV —Å hh.ru:\n""")
    await save_message_id(sent_message, callback)



async def parse_and_update_cv(cv_link: str, user_id: int) -> bool:
    '''
    True update cv else False 

    # https://hh.ru/resume/46d55ec600080f27eb0039ed1f794c6a344968?query=DS&searchRid=172607926475088847a46e5d0a22c612&hhtmFrom=resume_search_result
    
    hh_resume_dict={'position': 'Junior Data Science for NLP', 'age': '26', 'gender': '–ú—É–∂—á–∏–Ω–∞', 'job_search_status': '–ù–µ –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É', 'about': '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–µ–≥–∫–æ –æ–±—É—á–∞—é—Å—å.                                                                                                                –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≥–æ—Ç–æ–≤ —Ç—Ä–∞—Ç–∏—Ç—å –º–∞–∫—Å–∏–º—É–º —É—Å–∏–ª–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.  –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é  –ù–∞—á–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –µ—â–µ –Ω–∞ 2 –∫—É—Ä—Å–µ, –∫–æ–≥–¥–∞ –≤ –í–®–≠ –Ω–∞—á–∞–ª–∞—Å—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ò–ê–î (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö) https://github.com/alexserg1998/IAD  –ü–∏—à—É –¥–∏–ø–ª–æ–º –Ω–∞ —Ç–µ–º—É "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–∑–æ—Ä–∞ –Ω–∞—É—á–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –º–µ—Ç–æ–¥–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.   –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:\tEnglish (–£—á—É—Å—å –≤ EF –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ). –ü—Ä–æ—Ñ. –Ω–∞–≤—ã–∫–∏:\tPython (Pandas, numpy, scipy, sklearn, matplotlib), SQL (–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö).  Coursera: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –•–æ–±–±–∏:\t–í–µ–ª–æ—Å–∏–ø–µ–¥, –±–µ–≥, —Ñ—É—Ç–±–æ–ª, —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª.  ', 'jobs': ['–ö–æ–¥ —Ä–µ–≤—å—é–µ—Ä DS: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å—é –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç –∏ –ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É:)', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫ –∂–µ –ø–æ–º–æ—â—å –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç:)'], 'tags': ['–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏', 'PyTorch', 'Pandas', 'CV', 'NLP', 'Classic ML'], 'education': ['–ù–ò–£ –í–®–≠ –ú–ò–≠–ú: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. GPA: 9.0 –∏–∑ 10 , –ë–∞–∫–∞–ª–∞–≤—Ä'], 'link': 'https://hh.ru/resume/46d55ec600080f27eb0039ed1f794c6a344968?query=DS&searchRid=172607926475088847a46e5d0a22c612&hhtmFrom=resume_search_result'}
    
    '''
    # TODO : not async !!!
    print(f'bot:parse_and_update_cv:{cv_link=}')
    hh_resume_dict = hh_parser.get_data_from_hh_link(link=cv_link)
    # print(f'bot:parse_and_update_cv:{hh_resume_dict=}')
    
    if hh_resume_dict is not None and 'position' in hh_resume_dict and hh_resume_dict['position'] != '':
        is_success = await Network.update_data(user_id, {"hh_cv": hh_resume_dict})
        print(f'bot:parse_and_update_cv:{is_success=}')
        if is_success:
            return True

    # dont need - in User __init__ empty class assign
    # empty_hh_resume_dict =  {
    #     "position": "",
    #     "age": "",
    #     "gender": "",
    #     "job_search_status": "",
    #     "about": "",
    #     "jobs": [],
    #     "tags": [],
    #     "eduacation": [],
    #     "link": ""
    # }
    # await Network.update_data(user_id, {"hh_cv": empty_hh_resume_dict})

    # TODO : not async !!!
    try:
        github_resume_dict = github_parser.get_data_from_github_link(github_url=cv_link)
    except Exception as e:
        print(f'bot:parse_and_update_cv:{e=}')
        github_resume_dict = None
    # print(f'bot:parse_and_update_cv:{github_resume_dict=}')
        
    if github_resume_dict is not None:
        is_success = await Network.update_data(user_id, {"github_cv": github_resume_dict})
        print(f'bot:parse_and_update_cv:{is_success=}')
        if is_success:
            return True

    # empty_github_cv = {
    #             "github_username": "",
    #             "github_bio": "",
    #             "github_link": "",
    #             "github_repos": [
    #             ]
    #         }

    return False

@router.message(Editing.edit_cv_path) # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CV - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message, state: FSMContext):
    await save_message_id(message, message)
    # await delete_all_messages(message, message)
    # -------------BD: fill about_me ------------
    user_id = message.from_user.id
    await state.set_state(None)    

    is_update_cv = await parse_and_update_cv(cv_link=message.text, user_id=user_id)
    # TODO : not async !!!
    if not is_update_cv:
        await Network.update_data(user_id, {"cv_path": message.text})


    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! üî• –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úè', reply_markup=kb.back_to_profile)
    await save_message_id(sent_message, message)


#------------------------------------------- 4 Target ----------------

@router.message(Form.cv_path)
async def get_target(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill cv ------------
    user_id = message.from_user.id
    is_update_cv = await parse_and_update_cv(cv_link=message.text, user_id=user_id)

    if not is_update_cv:
        await Network.update_data(user_id, {"cv_path": message.text})
    
    # -----------------------------------------
    await state.update_data(cv_path=message.text)

    await state.set_state(None)
    await state.set_state(Form.target)
    target_msg = """–û–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ üîé"""
    sent_message = await message.answer(target_msg)
    await save_message_id(sent_message, message)



@router.message(F.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –∏—â—É')
@router.callback_query(F.data == "edit_target")  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç - –≤–æ–ø—Ä–æ—Å
async def edit_name(callback: CallbackQuery, state: FSMContext):
    print(f"bot:edit_name:{callback=}")
    # await save_message_id(callback, callback)
    await delete_all_messages(callback, callback)
    await state.set_state(Editing.edit_target)
    sent_message = await answer_by_msg_or_clb(callback, "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –∏—â—É:") # await callback.message.answer()
    print(sent_message)
    await save_message_id(sent_message, callback)


@router.message(Editing.edit_target)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
async def edit_name(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await state.set_state(None)
    # -------------BD: fill —Ç–∞—Ä–≥–µ—Ç ------------
    user_id = message.from_user.id
    await Network.update_data(user_id, {"target": message.text})
    # -----------------------------------------
    sent_message = await message.answer('–°—É–ø–µ—Ä! üî• –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úè', reply_markup=kb.back_to_profile_target)
    await save_message_id(sent_message, message)


@router.message(Form.target)
async def set_target(message: Message, state: FSMContext):
    await save_message_id(message, message)
    await delete_all_messages(message, message)

    # -------------BD: fill target ------------
    if message.text != "/set_profile":
        user_id = message.from_user.id
        await Network.update_data(user_id, {"target": message.text})
    # -----------------------------------------
    await state.update_data(target=message.text)
    await state.set_state(None)
    await ask_confirmation(message, state)


async def get_profile_str(rec_num, user_dict: dict, n_gramms: list):
    return "-" * 10 + '\n' + \
    f"/{rec_num}" + '\n' +\
    f"{user_dict['name']}\n\n" + \
    f"üßê About:\n{await apply_n_gramms(user_dict['about_me'], n_gramms)}\n\n" + \
    f"üìù CV —Å—Å—ã–ª–∫–∞:\n{user_dict['cv_path']}\n\n"

async def answer_by_msg_or_clb(message: Optional[Union[Message, CallbackQuery]], content:str,  reply_markup=None, photo=None):
    message_type = message.message if isinstance(message, CallbackQuery) else message
    if photo is not None and not isinstance(photo, str):
        print(f'answer_by_msg_or_clb:{photo=}')
        return await message_type.bot.send_photo(message_type.chat.id, photo=photo, caption=content,reply_markup=reply_markup, parse_mode="html")

    return await message_type.answer(content, reply_markup=reply_markup, parse_mode="html")



#--------------------–§–û–¢–û------------------
async def _download_photo(message: Message, photo = None, show_keyboard: bool = True):
    media_path = f"media"
    os.makedirs(media_path, mode=0o777, exist_ok=True)
    if photo is None:
        photo = message.photo[-1]
 
    await message.bot.download(
        # message.photo[-1],
        photo,
        destination=os.path.join(media_path, f"{message.from_user.id}.jpg")
    )
    if show_keyboard:
        await message.answer('–°—É–ø–µ—Ä! üî• —Ñ–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ!', reply_markup=kb.back_to_profile)


@router.message(F.photo)
async def download_photo(message: Message):
    await _download_photo(message)






#-------------------------------------------------------
@router.message(F.document)
async def download_pdf(message: Message):
    docs_path = f"pdfs"
    os.makedirs(docs_path, mode=0o777, exist_ok=True)
    await message.bot.download(message.document, destination=os.path.join(docs_path, f"{message.from_user.id}.pdf"))
    await message.answer('–°—É–ø–µ—Ä! üî• —Ä–µ–∑—é–º–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ!', reply_markup=kb.back_to_profile)